{"version":3,"sources":["constants/ulalaClasses.js","components/player/PlayerInputForm.js","constants/actionTypes.js","actions/player.js","constants/dragItemTypes.js","components/player/PlayerCard.js","components/player/PlayerList.js","selector.js","components/team/TeamPlayerIcon.js","components/team/TeamCard.js","constants/teamTypes.js","components/team/TeamList.js","components/app/App.js","serviceWorker.js","constants/localStorage.js","reducers/player.js","reducers/teamList.js","reducer.js","reducers/playerInputForm.js","store.js","index.js"],"names":["ClassType","DPS","MAGIC_DPS","TANK","SUPPORT","ULALA_CLASSES","id","name","type","getClassByName","result","index","element","trim","key","label","getAllClassIdsByType","classIds","push","ULALA_CLASS_TAG_COLORS","PlayerInputForm","Form","create","mapPropsToFields","props","playerInput","createFormField","value","power","class","onCancel","onSave","form","validateFields","err","formValues","isUpdateMode","playerIndex","teamType","teamIndex","resetFields","getFieldDecorator","this","title","visible","okText","onOk","layout","Item","rules","required","message","pattern","RegExp","allowClear","min","showSearch","labelInValue","style","width","placeholder","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","map","item","Option","React","Component","connect","state","playerInputForm","updatePlayer","player","payload","ItemTypes","PLAYER","PlayerCard","useDrag","playerObject","collect","monitor","isDragging","drag","assignedIcon","icon","onClick","onUnassignPlayerClick","actions","shouldRenderActions","onUpdatePlayerClick","onConfirm","onDeletePlayerClick","cancelText","playerColor","playerDescription","position","right","color","ref","opacity","cursor","marginTop","minWidth","extra","span","toLocaleString","PlayerList","openPlayerInputForm","openForm","closePlayerInputForm","closeForm","formRef","savePlayerInfo","addPlayer","updatePlayerClick","unassignPlayerClick","unassignPlayer","deletePlayerClick","deletePlayer","sortPlayersAscending","sortPlayersByPower","sortPlayersDescending","autoAssign","loading","autoAssignPlayers","exportData","formattedData","players","console","log","undefined","team","ExportToCsv","fieldSeparator","quoteStrings","decimalSeparator","showLabels","showTitle","useTextFile","useBom","useKeysAsHeaders","generateCsv","renderAddPlayerButton","fileUploadProps","accept","action","showUploadList","onChange","info","file","status","reader","FileReader","addEventListener","e","rawData","dataRows","split","isFirstRow","clearPlayers","forEach","playerData","length","playerName","replace","playerPower","playerClass","processCsvFile","target","readAsText","error","beforeUpload","gutter","shape","initPlayers","additionalActions","totalPlayers","havePlayers","display","alignItems","height","description","padding","justify","align","wrappedComponentRef","sortType","getAllPlayers","store","getPlayersByTeamIndex","emptySpots","i","fillUpEmptySpots","filter","TeamPlayerIcon","playerRepresentation","popoverContent","content","trigger","TeamCard","teamPower","parseInt","useDrop","drop","updatePlayerToTeam","canDrop","isOver","background","placement","count","overflowCount","backgroundColor","TeamType","DEFENSE","ATTACK","ELITE","TeamList","totalTeams","teamPlayers","getPlayersByTeamType","teamTemplate","teams","isEliteTeam","defenseTeamTemplates","eliteTeamTemplates","attackTeamTemplates","renderTeam","buildTeamTemplateByType","displayInRow","renderInColumns","renderInRows","teamList","Header","Layout","Footer","Sider","Content","backend","HTML5Backend","overflow","left","marginLeft","className","margin","Boolean","window","location","hostname","match","PLAYER_MASTER","storePlayersInLocalStorage","localStorage","setItem","JSON","stringify","removePlayerFromArray","arrayList","updatePlayerInArray","sortPlayers","sortAscending","sort","a","b","sortedPlayersByLargestPower","tankPlayers","includes","dpsPlayers","magicDpsPlayers","supportPlayers","assignedPlayers","shiftPlayer","shift","assignToTeams","assignedCount","unassignedPlayers","concat","combineReducers","localStoragePlayers","getItem","parse","newPlayers","slice","updatedArray","filtered","sorted","router","routerReducer","createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5288e302.chunk.js","sourcesContent":["export const ClassType = {\r\n    DPS: \"Dps\",\r\n    MAGIC_DPS: \"Magic DPS\",\r\n    TANK: \"Tank\",\r\n    SUPPORT: \"Support\"\r\n};\r\n\r\nexport const ULALA_CLASSES = [\r\n    {\r\n        id: 1,\r\n        name: \"Assassin\",\r\n        type: ClassType.DPS\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Hunter\",\r\n        type: ClassType.DPS\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Gladiator\",\r\n        type: ClassType.TANK\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Warrior\",\r\n        type: ClassType.TANK\r\n    },\r\n    {\r\n        id: 5,\r\n        name: \"Shaman\",\r\n        type: ClassType.SUPPORT\r\n    },\r\n    {\r\n        id: 6,\r\n        name: \"Warlock\",\r\n        type: ClassType.MAGIC_DPS\r\n    },\r\n    {\r\n        id: 7,\r\n        name: \"Druid\",\r\n        type: ClassType.SUPPORT\r\n    },\r\n    {\r\n        id: 8,\r\n        name: \"Mage\",\r\n        type: ClassType.MAGIC_DPS\r\n    }\r\n];\r\n\r\nexport const getClassByName = (name) => {\r\n    let result = null;\r\n\r\n    for (let index in ULALA_CLASSES) {\r\n        let element = ULALA_CLASSES[index];\r\n        if (element.name.trim() === name.trim()) {\r\n            result = element;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return {key: result.id, label: result.name};\r\n};\r\n\r\nexport const getAllClassIdsByType = (type) => {\r\n    let classIds = [];\r\n    for (let index in ULALA_CLASSES) {\r\n        let element = ULALA_CLASSES[index];\r\n\r\n        if (element.type === type) {\r\n            classIds.push(element.id);\r\n        }\r\n    }\r\n\r\n    return classIds;\r\n}\r\n\r\nexport const ULALA_CLASS_TAG_COLORS = [\r\n    \"orange\",\r\n    \"orange\",\r\n    \"red\",\r\n    \"red\",\r\n    \"purple\",\r\n    \"purple\",\r\n    \"cyan\",\r\n    \"cyan\",\r\n];\r\n\r\nexport const ULALA_CLASS_HEX_COLORS = [\r\n    \"orange\",\r\n    \"orange\",\r\n    \"red\",\r\n    \"red\",\r\n    \"purple\",\r\n    \"purple\",\r\n    \"cyan\",\r\n    \"cyan\",\r\n];\r\n\r\n","import React from \"react\";\r\nimport {Form, Input, InputNumber, Select} from 'antd';\r\nimport Modal from \"antd/lib/modal\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {ULALA_CLASSES} from \"../../constants/ulalaClasses\";\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state.playerInputForm\r\n});\r\n\r\nexport const PlayerInputForm = Form.create({\r\n    mapPropsToFields: (props) => {\r\n        const {playerInput} = props;\r\n\r\n        if (playerInput != null) {\r\n            return {\r\n                name: Form.createFormField({\r\n                    value: playerInput.name,\r\n                }),\r\n                power: Form.createFormField({\r\n                    value: playerInput.power,\r\n                }),\r\n                class: Form.createFormField({\r\n                    value: playerInput.class,\r\n                })\r\n            };\r\n        }\r\n\r\n    }\r\n})(\r\n    class extends React.Component {\r\n\r\n        onCancel = () => {\r\n            const {onCancel} = this.props;\r\n            onCancel();\r\n        };\r\n\r\n        onSave = () => {\r\n            const {form, onSave, playerInput} = this.props;\r\n\r\n            form.validateFields((err, formValues) => {\r\n                if (err) {\r\n                    return;\r\n                }\r\n\r\n                const isUpdateMode = playerInput != null;\r\n\r\n                if (isUpdateMode) {\r\n                    formValues.playerIndex = playerInput.playerIndex;\r\n                    formValues.teamType = playerInput.teamType;\r\n                    formValues.teamIndex = playerInput.teamIndex;\r\n                }\r\n\r\n                onSave(formValues, isUpdateMode);\r\n\r\n                form.resetFields();\r\n            });\r\n\r\n        };\r\n\r\n        render() {\r\n\r\n            const {form} = this.props;\r\n            const {getFieldDecorator} = form;\r\n\r\n            return (\r\n                <Modal\r\n                    title=\"Input Player Data\"\r\n                    visible={this.props.visible}\r\n                    okText=\"Save\"\r\n                    onOk={this.onSave}\r\n                    onCancel={this.onCancel}>\r\n\r\n                    <Form layout=\"vertical\">\r\n                        <Form.Item label=\"Name\">\r\n                            {getFieldDecorator('name', {\r\n                                rules: [\r\n                                    {required: true, message: 'Player name is required.'},\r\n                                    {pattern: new RegExp('^\\\\w*$'), message: 'Player name must be alphanumeric input only.'},\r\n                                ],\r\n                            })(<Input allowClear/>)}\r\n                        </Form.Item>\r\n                        <Form.Item label=\"Power\">\r\n                            {getFieldDecorator('power', {\r\n                                rules: [{required: true, message: 'Power is required.'}],\r\n                            })(<InputNumber min={1}/>)}\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Class\">\r\n                            {getFieldDecorator('class', {\r\n                                rules: [{required: true, message: 'Class is required.'}],\r\n                            })(<Select\r\n                                showSearch\r\n                                labelInValue\r\n                                style={{width: 200}}\r\n                                placeholder=\"Select class\"\r\n                                optionFilterProp=\"children\"\r\n                                filterOption={(input, option) =>\r\n                                    option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }\r\n                            >\r\n                                {ULALA_CLASSES.map((item) => {\r\n                                    return <Select.Option key={item.id} value={item.id}>{item.name}</Select.Option>\r\n                                })}\r\n                            </Select>)}\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            );\r\n        }\r\n\r\n    }\r\n)\r\n\r\n\r\nconnect(mapStateToProps)(PlayerInputForm)\r\n\r\n","export const PLAYER_INIT = 'PLAYER_INIT';\r\nexport const PLAYER_CLEAR = 'PLAYER_CLEAR';\r\nexport const PLAYER_ADD = 'PLAYER_ADD';\r\nexport const PLAYER_DELETE = 'PLAYER_REMOVE';\r\nexport const PLAYER_UPDATE = 'PLAYER_UPDATE';\r\n\r\nexport const PLAYER_SORT_BY_POWER = 'PLAYER_SORT_BY_POWER';\r\nexport const PLAYER_AUTO_ASSIGN = 'PLAYER_AUTO_ASSIGN';\r\nexport const PLAYER_UNASSIGN = 'PLAYER_UNASSIGN';\r\n\r\nexport const PLAYER_FORM_OPEN = 'PLAYER_FORM_OPEN';\r\nexport const PLAYER_FORM_CLOSE = 'PLAYER_FORM_CLOSE';\r\n\r\nexport const TEAM_INIT = 'TEAM_INIT';\r\nexport const TEAM_LIST_DISPLAY_IN_ROW = 'TEAM_LIST_DISPLAY_IN_ROW';\r\nexport const TEAM_LIST_DISPLAY_IN_COL = 'TEAM_LIST_DISPLAY_IN_COL';\r\n\r\n\r\n","import {\r\n    PLAYER_ADD, PLAYER_AUTO_ASSIGN, PLAYER_CLEAR,\r\n    PLAYER_DELETE,\r\n    PLAYER_FORM_CLOSE,\r\n    PLAYER_FORM_OPEN,\r\n    PLAYER_INIT,\r\n    PLAYER_SORT_BY_POWER, PLAYER_UNASSIGN,\r\n    PLAYER_UPDATE\r\n} from \"../constants/actionTypes\";\r\n\r\nexport const initPlayers = () => ({\r\n    type: PLAYER_INIT\r\n});\r\n\r\nexport const clearPlayers = () => ({\r\n    type: PLAYER_CLEAR\r\n})\r\n\r\nexport const addPlayer = player => ({\r\n    type: PLAYER_ADD,\r\n    payload: {\r\n        player: player\r\n    }\r\n});\r\n\r\nexport const updatePlayer = (player) => ({\r\n    type: PLAYER_UPDATE,\r\n    payload: {\r\n        player: player\r\n    }\r\n});\r\n\r\nexport const deletePlayer = playerIndex => ({\r\n    type: PLAYER_DELETE,\r\n    payload: {\r\n        playerIndex: playerIndex\r\n    }\r\n});\r\n\r\nexport const sortPlayersByPower = sortType => ({\r\n    type: PLAYER_SORT_BY_POWER,\r\n    payload: {\r\n        sortType: sortType\r\n    }\r\n});\r\n\r\nexport const autoAssignPlayers = () => ({\r\n    type: PLAYER_AUTO_ASSIGN\r\n});\r\n\r\nexport const unassignPlayer = (player) => ({\r\n    type: PLAYER_UNASSIGN,\r\n    payload: {\r\n        player\r\n    }\r\n});\r\n\r\nexport const openForm = (player) => ({\r\n    type: PLAYER_FORM_OPEN,\r\n    payload: {\r\n        playerInput: player\r\n    }\r\n});\r\n\r\nexport const closeForm = () => ({\r\n    type: PLAYER_FORM_CLOSE,\r\n});\r\n","export const ItemTypes = {\r\n    PLAYER: 'PLAYER',\r\n};\r\n","import React from 'react';\r\nimport {Button, Card, Col, Popconfirm, Row, Tag} from \"antd\";\r\nimport {useDrag} from \"react-dnd\";\r\nimport {ItemTypes} from \"../../constants/dragItemTypes\";\r\nimport {ULALA_CLASS_TAG_COLORS} from \"../../constants/ulalaClasses\";\r\n\r\nexport function PlayerCard(props) {\r\n\r\n    const onUpdatePlayerClick = () => {\r\n        props.onUpdatePlayerClick(props.value);\r\n    };\r\n\r\n    const onUnassignedPlayerClick = () => {\r\n        props.onUnassignPlayerClick(props.value);\r\n    }\r\n\r\n    const onDeletePlayerClick = () => {\r\n        props.onDeletePlayerClick(props.value.playerIndex);\r\n    };\r\n\r\n    const [{isDragging}, drag] = useDrag({\r\n        item: {\r\n            type: ItemTypes.PLAYER,\r\n            playerObject: props.value\r\n        },\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    const assignedIcon = props.value.teamIndex != null ?\r\n        <Button type=\"dashed\" icon=\"check\" onClick={onUnassignedPlayerClick}/> : \"\";\r\n\r\n    const actions = props.shouldRenderActions &&\r\n        <span>\r\n            {assignedIcon}\r\n            <Button type=\"dashed\" icon=\"edit\" onClick={onUpdatePlayerClick}/>\r\n             <Popconfirm\r\n                 title=\"Are you sure delete this record?\"\r\n                 onConfirm={onDeletePlayerClick}\r\n                 onCancel={() => {\r\n                 }}\r\n                 okText=\"Yes\"\r\n                 cancelText=\"No\">\r\n                 <Button type=\"dashed\" icon=\"delete\"/>\r\n             </Popconfirm>\r\n        </span>\r\n\r\n    let playerColor = ULALA_CLASS_TAG_COLORS[props.value.class.key - 1];\r\n\r\n    let playerDescription =\r\n        <div style={{position: \"absolute\", right: 0}}>\r\n            <Tag color={playerColor}>{props.value.class.label}</Tag>\r\n        </div>\r\n\r\n    return (\r\n        <div ref={drag}\r\n             style={{\r\n                 opacity: isDragging ? 0.5 : 1,\r\n                 cursor: 'move'\r\n             }}>\r\n            <Card\r\n                style={{width: \"auto\", marginTop: 5, minWidth: 270}}\r\n                title={\"(\" + (props.value.playerIndex + 1) + \") \" + props.value.name}\r\n                extra={actions}\r\n            >\r\n                <Row>\r\n                    <Col span={12}>{props.value.power.toLocaleString()}</Col>\r\n                    <Col span={12}>{playerDescription}</Col>\r\n                </Row>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Button, Col, Divider, Empty, message, Row, Upload} from \"antd\";\r\nimport {PlayerInputForm} from \"./PlayerInputForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addPlayer,\r\n    autoAssignPlayers,\r\n    unassignPlayer,\r\n    clearPlayers,\r\n    closeForm,\r\n    deletePlayer,\r\n    initPlayers,\r\n    openForm,\r\n    sortPlayersByPower,\r\n    updatePlayer\r\n} from \"../../actions/player\";\r\nimport {PlayerCard} from \"./PlayerCard\";\r\nimport {ExportToCsv} from \"export-to-csv\";\r\nimport {getClassByName} from \"../../constants/ulalaClasses\";\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state.playerInputForm,\r\n    ...state.player\r\n});\r\n\r\nclass PlayerList extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.initPlayers();\r\n    }\r\n\r\n    openPlayerInputForm = () => {\r\n        this.props.openForm(null);\r\n    };\r\n\r\n    closePlayerInputForm = () => {\r\n        this.props.closeForm();\r\n    };\r\n\r\n    formRef = (ref) => {\r\n        this.playerInputForm = ref\r\n    };\r\n\r\n    savePlayerInfo = (formValues, isUpdateMode) => {\r\n        isUpdateMode ? this.props.updatePlayer(formValues) : this.props.addPlayer(formValues);\r\n        this.props.closeForm();\r\n    };\r\n\r\n    updatePlayerClick = (player) => {\r\n        this.props.openForm(player);\r\n    };\r\n\r\n    unassignPlayerClick = (player) => {\r\n        this.props.unassignPlayer(player);\r\n    }\r\n\r\n    deletePlayerClick = (playerIndex) => {\r\n        this.props.deletePlayer(playerIndex)\r\n    };\r\n\r\n    sortPlayersAscending = () => {\r\n        this.props.sortPlayersByPower(true)\r\n    };\r\n\r\n    sortPlayersDescending = () => {\r\n        this.props.sortPlayersByPower(false)\r\n    };\r\n\r\n    autoAssign = () => {\r\n        // TODO\r\n        message.loading(\"Work in progress...\");\r\n        this.props.autoAssignPlayers()\r\n    };\r\n\r\n    exportData = () => {\r\n        // export all player data to csv\r\n        const formattedData = this.props.players.map((item) => {\r\n            console.log(item);\r\n            if(item.teamIndex === undefined) {\r\n                return {\r\n                    name: item.name,\r\n                    power: item.power,\r\n                    class: item.class.label,\r\n                    team: \"\"\r\n                }\r\n            } else {\r\n                return {\r\n                    name: item.name,\r\n                    power: item.power,\r\n                    class: item.class.label,\r\n                    team: item.teamType + \" - Team \" +  (item.teamIndex+1),\r\n                }\r\n            }\r\n        });\r\n\r\n        const options = {\r\n            fieldSeparator: ',',\r\n            quoteStrings: '\"',\r\n            decimalSeparator: '.',\r\n            showLabels: true,\r\n            showTitle: false,\r\n            useTextFile: false,\r\n            useBom: true,\r\n            useKeysAsHeaders: true,\r\n        };\r\n        const csvExporter = new ExportToCsv(options);\r\n\r\n        csvExporter.generateCsv(formattedData);\r\n    };\r\n\r\n    renderAddPlayerButton = () => {\r\n\r\n        let props = this.props;\r\n\r\n        const processCsvFile = (rawData) => {\r\n            let dataRows = rawData.split(/\\n/g,);\r\n            let isFirstRow = true;\r\n\r\n            props.clearPlayers();\r\n            dataRows.forEach(function (element) {\r\n                if (isFirstRow) {\r\n                    isFirstRow = false;\r\n                } else {\r\n                    let playerData = element.split(\",\");\r\n                    if (playerData.length >= 3) {\r\n                        // insert as player data\r\n                        const playerName = playerData[0].replace(/\"/g, \"\");\r\n                        const playerPower = playerData[1].replace(/\"/g, \"\");\r\n                        const playerClass = playerData[2].replace(/\"/g, \"\");\r\n\r\n                        let player = {\r\n                            name: playerName,\r\n                            power: playerPower,\r\n                            class: getClassByName(playerClass)\r\n                        };\r\n\r\n                        props.addPlayer(player)\r\n                    }\r\n                }\r\n            })\r\n        };\r\n\r\n        const fileUploadProps = {\r\n            name: \"file\",\r\n            accept: '.csv,application/vnd.ms-excel',\r\n            action: '#',\r\n            showUploadList: false,\r\n            onChange(info) {\r\n                if (info.file.status !== 'uploading') {\r\n                    let reader = new FileReader();\r\n                    reader.addEventListener('load', function (e) {\r\n                        processCsvFile(e.target.result)\r\n                    });\r\n\r\n                    reader.readAsText(info.file);\r\n                }\r\n                if (info.file.status === 'done') {\r\n                    console.log(\"done\")\r\n                } else if (info.file.status === 'error') {\r\n                    message.error(\"Oops, there is an error.\");\r\n                }\r\n            },\r\n            beforeUpload(file) {\r\n                return false\r\n            },\r\n        };\r\n\r\n        return (\r\n            <Row gutter={8}>\r\n                <Col span={12}>\r\n                    <Button type=\"primary\" icon=\"plus\" shape=\"round\"\r\n                            onClick={this.openPlayerInputForm}>Add</Button>\r\n                </Col>\r\n                <Col span={12}>\r\n                    <Upload {...fileUploadProps}>\r\n                        <Button type=\"primary\" icon=\"import\" shape=\"round\">Import</Button>\r\n                    </Upload>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        let players = \"\";\r\n        let additionalActions = \"\";\r\n        let totalPlayers = 0;\r\n\r\n        const havePlayers = this.props.players != null && this.props.players.length > 0;\r\n\r\n        if (havePlayers) {\r\n            totalPlayers = this.props.players.length;\r\n            players = this.props.players.map((item, index) => (\r\n                <PlayerCard key={index}\r\n                            value={item}\r\n                            shouldRenderActions={true}\r\n                            onUnassignPlayerClick={this.unassignPlayerClick}\r\n                            onUpdatePlayerClick={this.updatePlayerClick}\r\n                            onDeletePlayerClick={this.deletePlayerClick}/>\r\n            ));\r\n            additionalActions =\r\n                <Col>\r\n                    <Button type=\"default\" icon=\"sort-ascending\" onClick={this.sortPlayersAscending}/>\r\n                    <Button type=\"default\" icon=\"sort-descending\" onClick={this.sortPlayersDescending}/>\r\n                    <Button type=\"default\" icon=\"solution\" onClick={this.autoAssign}/>\r\n                    <Button type=\"default\" icon=\"export\" onClick={this.exportData}>Export to CSV</Button>\r\n                </Col>\r\n        } else {\r\n            players =\r\n                <div style={{display: \"flex\", alignItems: \"center\", height: \"80vh\"}}>\r\n                    <Empty description={\"Get started by adding players.\"}>\r\n                        {this.renderAddPlayerButton()}\r\n                    </Empty>\r\n                </div>\r\n        }\r\n\r\n        return (\r\n            <div style={{padding: '20px 20px'}}>\r\n                <h3>Players{havePlayers && (\"(\" + totalPlayers + \"/80)\")}</h3>\r\n                {havePlayers && this.renderAddPlayerButton()}\r\n                <Divider/>\r\n                <Row>{additionalActions}</Row>\r\n                <Row type=\"flex\" justify=\"space-around\" align=\"top\">\r\n                    <Col>{players}</Col>\r\n                </Row>\r\n                <PlayerInputForm wrappedComponentRef={this.formRef}\r\n                                 playerInput={this.props.playerInput}\r\n                                 onSave={this.savePlayerInfo}\r\n                                 onCancel={this.closePlayerInputForm}\r\n                                 visible={this.props.visible}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    openForm,\r\n    closeForm,\r\n    initPlayers,\r\n    addPlayer,\r\n    updatePlayer,\r\n    deletePlayer,\r\n    clearPlayers,\r\n    unassignPlayer,\r\n    sortPlayersByPower,\r\n    autoAssignPlayers\r\n})(PlayerList)\r\n","export const getAllPlayers = store => store.player.players;\r\n\r\nexport const fillUpEmptySpots = (players) => {\r\n    let emptySpots = 4 - players.length;\r\n    for (let i = 0; i < emptySpots; i++) {\r\n        players.push(null)\r\n    }\r\n    return players;\r\n};\r\n\r\nexport const getPlayersByTeamType = (players, teamType) => {\r\n    return players.filter((value) => {\r\n        return value.teamType === teamType;\r\n    })\r\n}\r\n\r\nexport const getPlayersByTeamIndex = (players, index) => {\r\n    let filtered = players.filter((value) => {\r\n        return value.teamIndex === index;\r\n    });\r\n    return fillUpEmptySpots(filtered)\r\n};\r\n","import React from 'react';\r\nimport {Col, Icon, Popover} from \"antd\";\r\nimport {PlayerCard} from \"../player/PlayerCard\";\r\nimport {useDrag} from \"react-dnd\";\r\nimport {ItemTypes} from \"../../constants/dragItemTypes\";\r\nimport {ULALA_CLASS_TAG_COLORS} from \"../../constants/ulalaClasses\";\r\n\r\nexport function TeamPlayerIcon(props) {\r\n\r\n    let playerRepresentation;\r\n    let {player} = props;\r\n\r\n    const [{isDragging}, drag] = useDrag({\r\n        item: {\r\n            type: ItemTypes.PLAYER,\r\n            playerObject: player\r\n        },\r\n        collect: monitor => ({\r\n            isDragging: !!monitor.isDragging(),\r\n        }),\r\n    });\r\n\r\n    if (player != null) {\r\n        let popoverContent = <PlayerCard value={player}/>\r\n        let playerColor = ULALA_CLASS_TAG_COLORS[player.class.key - 1];\r\n\r\n        playerRepresentation =\r\n            <div ref={drag}\r\n                 style={{\r\n                     opacity: isDragging ? 0.5 : 1,\r\n                     cursor: 'move'\r\n                 }}>\r\n                <Popover\r\n                    content={popoverContent}\r\n                    trigger=\"hover\"><Icon style={{color: playerColor}} type=\"smile\"/> {player.playerIndex + 1} <p>{player.name}</p>\r\n                </Popover>\r\n            </div>\r\n    } else {\r\n        playerRepresentation = <Icon type=\"question\"/>\r\n    }\r\n\r\n    return (\r\n        <Col span={6}>{playerRepresentation}</Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Badge, Card, Row, Tooltip} from 'antd';\r\nimport {useDrop} from \"react-dnd\";\r\nimport {ItemTypes} from \"../../constants/dragItemTypes\";\r\nimport {TeamPlayerIcon} from \"./TeamPlayerIcon\";\r\n\r\nexport function TeamCard(props) {\r\n\r\n    let teamPower = 0;\r\n    let totalPlayers = 0;\r\n\r\n    const {team} = props;\r\n\r\n    if (team.players != null) {\r\n        team.players.forEach(function (element) {\r\n            if (element != null) {\r\n                ++totalPlayers;\r\n            }\r\n            teamPower += element ? parseInt(element.power) : 0;\r\n        });\r\n    }\r\n\r\n    const [{isOver}, drop] = useDrop({\r\n        accept: ItemTypes.PLAYER,\r\n        drop: (item) => props.updatePlayerToTeam(item.playerObject, team),\r\n        canDrop: () => {\r\n            return totalPlayers < 4\r\n        },\r\n        collect: monitor => ({\r\n            isOver: !!monitor.isOver(),\r\n        }),\r\n    });\r\n\r\n\r\n    return (\r\n        <div ref={drop}>\r\n            <Card\r\n                style={{\r\n                    width: \"auto\",\r\n                    background: isOver ? \"#f6ffed\" : \"white\",\r\n                }}\r\n                extra={<Tooltip placement=\"top\" title=\"Power\">\r\n                    <Badge count={teamPower.toLocaleString()}\r\n                           overflowCount={99999999}\r\n                           style={{backgroundColor: '#52c41a'}}/></Tooltip>}\r\n                title={\"Team \" + (team.teamIndex + 1)}>\r\n                <Row>\r\n                    {\r\n                        team.players.map((element, index) => {\r\n                            return <TeamPlayerIcon key={index} player={element}/>\r\n                        })\r\n                    }\r\n                </Row>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","export const TeamType = {\r\n    DEFENSE: \"DEFENSE\",\r\n    ATTACK: \"ATTACK\",\r\n    ELITE: \"ELITE\",\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport {Col, Row} from \"antd\";\r\nimport {getAllPlayers, getPlayersByTeamIndex, getPlayersByTeamType} from \"../../selector\";\r\nimport {connect} from \"react-redux\";\r\nimport {TeamCard} from \"./TeamCard\";\r\nimport {updatePlayer} from \"../../actions/player\";\r\nimport {TeamType} from \"../../constants/teamTypes\";\r\nimport {TEAM_LIST_DISPLAY_IN_COL} from \"../../constants/actionTypes\";\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state.teamList,\r\n    players: getAllPlayers(state),\r\n});\r\n\r\nclass TeamList extends React.Component {\r\n\r\n    updatePlayerToTeam = (player, team) => {\r\n        player.teamIndex = team.teamIndex;\r\n        player.teamType = team.teamType;\r\n        this.props.updatePlayer(player)\r\n    };\r\n\r\n    buildTeamTemplateByType(players, teamType, totalTeams) {\r\n        let teamPlayers = getPlayersByTeamType(this.props.players, teamType);\r\n        let teamTemplate = [];\r\n\r\n        for (let i = 0; i < totalTeams; i++) {\r\n            teamTemplate.push({\r\n                players: getPlayersByTeamIndex(teamPlayers, i),\r\n                teamType: teamType,\r\n                teamIndex: i\r\n            });\r\n        }\r\n\r\n        return teamTemplate;\r\n    }\r\n\r\n    renderTeam(teams) {\r\n        let isEliteTeam = teams && teams.length === 1;\r\n\r\n        return (\r\n            teams.map((item, index) => (\r\n                <Col span={!isEliteTeam ? 12 : 24} key={index}>\r\n                    <TeamCard team={item}\r\n                              updatePlayerToTeam={this.updatePlayerToTeam}/>\r\n                </Col>\r\n            ))\r\n        )\r\n    }\r\n\r\n    renderInColumns(defenseTeamTemplates, eliteTeamTemplates, attackTeamTemplates) {\r\n        return (\r\n            <Row gutter={16}\r\n                 type=\"flex\"\r\n                 justify=\"space-around\"\r\n                 align=\"top\">\r\n                <Col span={9}>\r\n                    <h3>Defense</h3>\r\n                    <Row gutter={16}>\r\n                        {this.renderTeam(defenseTeamTemplates)}\r\n                    </Row>\r\n                </Col>\r\n                <Col span={6}>\r\n                    <h3>Elite</h3>\r\n                    <Row gutter={16}>\r\n                        {this.renderTeam(eliteTeamTemplates)}\r\n                    </Row>\r\n                </Col>\r\n                <Col span={9}>\r\n                    <h3>Attack</h3>\r\n                    <Row gutter={16}>\r\n                        {this.renderTeam(attackTeamTemplates)}\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    renderInRows(defenseTeamTemplates, eliteTeamTemplates, attackTeamTemplates) {\r\n        return (\r\n            <Row gutter={16}\r\n                 type=\"flex\"\r\n                 justify=\"space-around\"\r\n                 align=\"top\">\r\n                <Col>\r\n                    <h3>Defense</h3>\r\n                    {this.renderTeam(defenseTeamTemplates)}\r\n\r\n                    <h3>Elite</h3>\r\n                    {this.renderTeam(eliteTeamTemplates)}\r\n\r\n                    <h3>Attack</h3>\r\n                    {this.renderTeam(attackTeamTemplates)}\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        let defenseTeamTemplates = [];\r\n        let attackTeamTemplates = [];\r\n        let eliteTeamTemplates = [];\r\n\r\n        if (this.props.players != null) {\r\n            // defense teams\r\n            defenseTeamTemplates = this.buildTeamTemplateByType(this.props.players, TeamType.DEFENSE, 8);\r\n            attackTeamTemplates = this.buildTeamTemplateByType(this.props.players, TeamType.ATTACK, 8);\r\n            eliteTeamTemplates = this.buildTeamTemplateByType(this.props.players, TeamType.ELITE, 1);\r\n        }\r\n\r\n        console.log(this.props.displayInRow);\r\n        let displayType = (this.props.display && this.props.display === TEAM_LIST_DISPLAY_IN_COL)\r\n            ? this.renderInColumns(defenseTeamTemplates, eliteTeamTemplates, attackTeamTemplates)\r\n            : this.renderInRows(defenseTeamTemplates, eliteTeamTemplates, attackTeamTemplates);\r\n\r\n        // let displayType = this.renderInRows(defenseTeamTemplates, eliteTeamTemplates, attackTeamTemplates);\r\n        return (\r\n            displayType\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {updatePlayer})(TeamList);\r\n","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport {connect} from \"react-redux\";\nimport {Layout} from \"antd\";\nimport PlayerList from \"../player/PlayerList\";\nimport TeamList from \"../team/TeamList\";\nimport {DndProvider} from \"react-dnd\";\nimport HTML5Backend from 'react-dnd-html5-backend'\n\nconst {Header, Footer, Sider, Content} = Layout;\n\nfunction App() {\n\n    const siderWidth = 300\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n        <Layout>\n            <Sider width={siderWidth}\n                   style={{\n                       background: '#fff',\n                       overflow: 'auto',\n                       height: '100vh',\n                       position: 'fixed',\n                       left: 0\n\n                   }}>\n                <PlayerList/>\n            </Sider>\n\n            <Layout style={{\n                marginLeft: siderWidth,\n                height: '100vh'\n            }}>\n\n                <Header className=\"header\" style={{background: \"antiquewhite\"}}><h2>Ulala Clan War Planner</h2></Header>\n\n                <Content style={{\n                    margin: '10px',\n                    padding: '20px',\n                    background: 'white',\n                    overflow: 'auto'}}>\n\n                   <TeamList/>\n\n                </Content>\n\n                <Footer className=\"custom-footer\">Developed by kmye ©2019</Footer>\n            </Layout>\n\n        </Layout>\n        </DndProvider>\n\n    );\n}\n\nexport default connect()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const PLAYER_MASTER = \"PLAYER_MASTER\";\r\n","import {\r\n    PLAYER_ADD,\r\n    PLAYER_AUTO_ASSIGN,\r\n    PLAYER_CLEAR,\r\n    PLAYER_DELETE,\r\n    PLAYER_INIT,\r\n    PLAYER_SORT_BY_POWER, PLAYER_UNASSIGN,\r\n    PLAYER_UPDATE\r\n} from \"../constants/actionTypes\";\r\nimport {PLAYER_MASTER} from \"../constants/localStorage\";\r\nimport {ClassType, getAllClassIdsByType} from \"../constants/ulalaClasses\";\r\nimport {TeamType} from \"../constants/teamTypes\";\r\n\r\nfunction storePlayersInLocalStorage(players) {\r\n    localStorage.setItem(PLAYER_MASTER, JSON.stringify(players));\r\n}\r\n\r\nfunction removePlayerFromArray(playerIndex, arrayList) {\r\n    let filtered = arrayList.filter(function (value, index) {\r\n        return index !== playerIndex;\r\n    });\r\n\r\n    // update all index\r\n    return filtered.map((item, index) => {\r\n        item.playerIndex = index;\r\n        return item;\r\n    })\r\n}\r\n\r\nfunction updatePlayerInArray(player, arrayList) {\r\n    return arrayList.map((item, index) => {\r\n        if (index !== player.playerIndex) {\r\n            return item\r\n        }\r\n\r\n        // Otherwise, this is the one we want - return an updated value\r\n        return {\r\n            ...item,\r\n            ...player\r\n        }\r\n    })\r\n}\r\n\r\nfunction sortPlayers(players, sortAscending) {\r\n    let sorted = players.sort(function (a, b) {\r\n        return (sortAscending) ? (a.power - b.power) : (b.power) - (a.power);\r\n    });\r\n\r\n    return sorted.map((item, index) => {\r\n        item.playerIndex = index;\r\n        return item;\r\n    });\r\n}\r\n\r\nfunction autoAssignPlayers(players) {\r\n    let sortedPlayersByLargestPower = sortPlayers(players, false);\r\n\r\n    // separate into tank, dps and healers\r\n    let tankPlayers = sortedPlayersByLargestPower.filter((item) => {\r\n        return getAllClassIdsByType(ClassType.TANK).includes(item.class.key)\r\n    });\r\n\r\n    let dpsPlayers = sortedPlayersByLargestPower.filter((item) => {\r\n        return getAllClassIdsByType(ClassType.DPS).includes(item.class.key)\r\n    });\r\n\r\n    let magicDpsPlayers = sortedPlayersByLargestPower.filter((item) => {\r\n        return getAllClassIdsByType(ClassType.MAGIC_DPS).includes(item.class.key)\r\n    });\r\n\r\n    let supportPlayers = sortedPlayersByLargestPower.filter((item) => {\r\n        return getAllClassIdsByType(ClassType.SUPPORT).includes(item.class.key)\r\n    });\r\n\r\n    let assignedPlayers = [];\r\n\r\n    let shiftPlayer = (players, teamIndex, teamType) => {\r\n        let player = players.shift();\r\n        player.teamIndex = teamIndex;\r\n        player.teamType = teamType;\r\n\r\n        return player;\r\n    };\r\n\r\n    const assignToTeams = (teamIndex, teamType) => {\r\n        let assignedCount = 0;\r\n\r\n        do {\r\n            if (tankPlayers.length > 0) {\r\n                assignedPlayers.push(shiftPlayer(tankPlayers, teamIndex, teamType));\r\n                ++assignedCount;\r\n            }\r\n\r\n            if (supportPlayers.length > 0) {\r\n                assignedPlayers.push(shiftPlayer(supportPlayers, teamIndex, teamType));\r\n                ++assignedCount;\r\n            }\r\n\r\n            if (magicDpsPlayers.length > 0) {\r\n                assignedPlayers.push(shiftPlayer(magicDpsPlayers, teamIndex, teamType));\r\n                ++assignedCount;\r\n            }\r\n\r\n            if (dpsPlayers.length > 0) {\r\n                assignedPlayers.push(shiftPlayer(dpsPlayers, teamIndex, teamType));\r\n                ++assignedCount;\r\n            }\r\n\r\n        } while (assignedCount < 4)\r\n    };\r\n\r\n    assignToTeams(0, TeamType.ELITE);\r\n    for (let i = 0; i < 8; ++i) {\r\n        assignToTeams(i, TeamType.ATTACK);\r\n        assignToTeams(i, TeamType.DEFENSE);\r\n    }\r\n\r\n    let unassignedPlayers = [];\r\n\r\n    if (assignedPlayers < sortedPlayersByLargestPower) {\r\n        unassignedPlayers = players.filter((item) => {\r\n            return item.teamIndex === undefined;\r\n        })\r\n    }\r\n\r\n    return assignedPlayers.concat(unassignedPlayers);\r\n}\r\n\r\n\r\nexport default (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case PLAYER_INIT: {\r\n            let localStoragePlayers = localStorage.getItem(PLAYER_MASTER);\r\n            return {\r\n                ...state,\r\n                players: localStoragePlayers == null ? [] : JSON.parse(localStoragePlayers)\r\n            };\r\n        }\r\n\r\n        case PLAYER_CLEAR: {\r\n            localStorage.setItem(PLAYER_MASTER, null);\r\n            return {\r\n                ...state,\r\n                players: []\r\n            }\r\n        }\r\n\r\n        case PLAYER_ADD: {\r\n            let {player} = action.payload;\r\n            let newPlayers = state.players.slice();\r\n            player.playerIndex = newPlayers.length;\r\n            newPlayers.push(player);\r\n            storePlayersInLocalStorage(newPlayers);\r\n            return {\r\n                ...state,\r\n                players: newPlayers\r\n            };\r\n        }\r\n\r\n        case PLAYER_UPDATE: {\r\n            let updatedArray = updatePlayerInArray(action.payload.player, state.players);\r\n            storePlayersInLocalStorage(updatedArray);\r\n            return {\r\n                ...state,\r\n                players: updatedArray\r\n            };\r\n        }\r\n\r\n        case PLAYER_DELETE: {\r\n            let filtered = removePlayerFromArray(action.payload.playerIndex, state.players);\r\n            storePlayersInLocalStorage(filtered);\r\n            return {\r\n                ...state,\r\n                players: filtered\r\n            };\r\n        }\r\n\r\n        case PLAYER_SORT_BY_POWER:\r\n            const sortType = action.payload.sortType;\r\n            let sorted = sortPlayers(state.players, sortType);\r\n            storePlayersInLocalStorage(sorted);\r\n            return {\r\n                ...state,\r\n                players: sorted\r\n            };\r\n\r\n        case PLAYER_AUTO_ASSIGN: {\r\n            let assignedPlayers = autoAssignPlayers(state.players);\r\n            storePlayersInLocalStorage(assignedPlayers);\r\n            return {\r\n                ...state,\r\n                players: assignedPlayers\r\n            }\r\n        }\r\n        case PLAYER_UNASSIGN: {\r\n            let player = action.payload.player;\r\n            player.teamIndex = null;\r\n            player.teamType = null;\r\n            let updatedArray = updatePlayerInArray(player, state.players);\r\n            storePlayersInLocalStorage(updatedArray);\r\n            return {\r\n                ...state,\r\n                players: updatedArray\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {TEAM_INIT} from \"../constants/actionTypes\";\r\n\r\nexport default (state = {}, action) => {\r\n\r\n    switch (action.type) {\r\n        case TEAM_INIT: {\r\n            return {\r\n                ...state,\r\n                displayInRow: true\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n\r\n    }\r\n}\r\n","import {combineReducers} from 'redux';\n\nimport {routerReducer} from 'react-router-redux';\n\nimport player from './reducers/player';\nimport playerInputForm from './reducers/playerInputForm';\nimport teamList from \"./reducers/teamList\";\n\nexport default combineReducers({\n    // TODO add reducer here\n    player,\n    playerInputForm,\n    teamList,\n    router: routerReducer\n});\n","import {PLAYER_FORM_CLOSE, PLAYER_FORM_OPEN} from \"../constants/actionTypes\";\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case PLAYER_FORM_OPEN:\r\n            return {\r\n                ...state,\r\n                playerInput: action.payload.playerInput,\r\n                visible: true\r\n            };\r\n\r\n        case PLAYER_FORM_CLOSE:\r\n            return {\r\n                ...state,\r\n                visible: false\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {createStore} from 'redux';\r\n\r\nimport reducer from './reducer';\r\n\r\nexport const store = createStore(reducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\n\n\nReactDOM.render(<Provider store={store}> <App/> </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}